{{- if .Values.vault.init -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "vault-bootstrap.fullname" . }}-init
  labels:
    {{- include "vault-bootstrap.labels" . | nindent 4 }}
#  annotations:
#    "helm.sh/hook": post-install
#    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
#    "helm.sh/hook-weight": "-5"
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 120
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        {{- include "vault-bootstrap.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "vault-bootstrap.serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: init
        image: "{{ .Values.oc.image.repository }}:{{ .Values.oc.image.tag }}"
        command:
        - /bin/bash
        - '-c'
        - |
            #!/bin/bash

            # Better rollout pod check
            sleep 20

            VAULT=$(oc -n hashicorp get pod -lapp.kubernetes.io/name=vault -o custom-columns=.:.metadata.name --no-headers)

            while [ -z $VAULT ]
            do
              echo "Waiting for vault pod to initialize."
              VAULT=$(oc -n hashicorp get pod -lapp.kubernetes.io/name=vault -o custom-columns=.:.metadata.name --no-headers)
              sleep 2
            done
            echo "Found pod: $VAULT"

            RUNNING=$(oc get pod/$VAULT | grep -v NAME | awk '{ print $3 }' | grep Running)
            while [ -z $RUNNING ]
            do
              echo "Waiting on $VAULT POD status to update to Running"
              sleep 2
              RUNNING=$(oc get pod/$VAULT  | grep -v NAME | awk '{ print $3 }' | grep Running)
            done

            echo "$VAULT POD status [ $RUNNING ]"
            echo "Checking vault status"
            RESULT=$(oc -n hashicorp exec ${VAULT} --  vault status | grep Initialized)
            if [[ "$RESULT" == *"true"* ]]; then
              INITIALIZED=1
            else
              INITIALIZED=0
            fi
            echo "Vault initialized: $INITIALIZED"

            if [ $INITIALIZED -eq 0 ]; then
              # We are going to check to see if we left some debris in the namespace hashicorp
              SECRET=$(oc get secrets | grep -E '(^|\s)vault-vault-bootstrap($|\s)' | awk '{print $1}')

              if [ ! -z $SECRET ]; then 
                echo "Found secret in the hashicorp namespace [$SECRET] with vault keys!"
                echo "Hopefully these are still valid.  If not follow these steps:"
                echo " 1 - delete the vault ArgoCD application from the datacenter or hub ArgoCD instance"
                echo " 2 - delete the hashicorp namespace. e.g. oc delete ns hashicorp"
              else 
                oc -n hashicorp exec ${VAULT} --  vault operator init -tls-skip-verify -key-shares=1 -key-threshold=1 >/tmp/init.txt
                echo "Extracting initial root token"
                KEYS=$(cat /tmp/init.txt|grep "Unseal Key 1"|cut -d':' -f2| tr -d ' ')

                VAULT_TOKEN=$(cat /tmp/init.txt|grep "Initial Root Token"|cut -d':' -f2| tr -d ' ')

                echo "KEYS=${KEYS}" > /tmp/vault.env
                echo "VAULT_TOKEN=${VAULT_TOKEN}" >> /tmp/vault.env

                # Secret must not part of the release
                echo "Creating bootstrap secret"
                oc create secret generic vault-vault-bootstrap --from-env-file=/tmp/vault.env
              fi
            else
              echo "Vault already initialized"
              SECRET=$(oc get secrets | grep -E '(^|\s)vault-vault-bootstrap($|\s)' | awk '{print $1}')

              if [ ! -z $SECRET ]; then 
                echo "Found secret in the hashicorp namespace [$SECRET] with vault keys!"
              fi
              exit 0
            fi
{{- end }}
