{{- if .Values.vault.init -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "vault-bootstrap.fullname" . }}-init
  labels:
    {{- include "vault-bootstrap.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-5"
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 120
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        {{- include "vault-bootstrap.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "vault-bootstrap.serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: init
        image: "{{ .Values.oc.image.repository }}:{{ .Values.oc.image.tag }}"
        command:
        - /bin/bash
        - '-c'
        - |
            #!/bin/bash

            # Better rollout pod check
            # sleep 30

            VAULT=$(oc -n hashicorp get pod -lapp.kubernetes.io/name=vault -o custom-columns=.:.metadata.name --no-headers)

            while [ -z $VAULT ]
            do
              echo "Waiting for vault pod to initialize."
              VAULT=$(oc -n hashicorp get pod -lapp.kubernetes.io/name=vault -o custom-columns=.:.metadata.name --no-headers)
              sleep 2
            done
            echo "Found pod: $VAULT"

            echo "Checking vault status"
            RESULT=$(oc -n hashicorp exec ${VAULT} --  vault status | grep Initialized)
            if [[ "$RESULT" == *"true"* ]]; then
              INITIALIZED=1
            else
              INITIALIZED=0
            fi
            echo "Vault initialized: $INITIALIZED"

            if [ $INITIALIZED -eq 0 ]; then
              oc -n hashicorp exec ${VAULT} --  vault operator init -tls-skip-verify -key-shares=1 -key-threshold=1 >/tmp/init.txt
              echo "Extracting initial root token"
              KEYS=$(cat /tmp/init.txt|grep "Unseal Key 1"|cut -d':' -f2| tr -d ' ')

              VAULT_TOKEN=$(cat /tmp/init.txt|grep "Initial Root Token"|cut -d':' -f2| tr -d ' ')

              echo "KEYS=${KEYS}" > /tmp/vault.env
              echo "VAULT_TOKEN=${VAULT_TOKEN}" >> /tmp/vault.env

              # Secret must not part of the release
              echo "Creating bootstrap secret"
              oc create secret generic vault-vault-bootstrap --from-env-file=/tmp/vault.env
            else
              echo "Vault already initialized"
              exit 0
            fi
{{- end }}
